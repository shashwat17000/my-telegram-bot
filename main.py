# === Vercel ‡§î‡§∞ Webhook ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§¨‡•â‡§ü ‡§ï‡•ã‡§° ===

import os
import random
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
)

# Logging ‡§ï‡•ã ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø Vercel ‡§™‡§∞ ‡§è‡§∞‡§∞ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡•á‡§Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã Secrets (Environment Variables) ‡§∏‡•á ‡§≤‡•á‡§®‡§æ
try:
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    if BOT_TOKEN is None:
        raise ValueError("BOT_TOKEN ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ! ‡§ï‡•É‡§™‡§Ø‡§æ Vercel ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§")
except ValueError as e:
    logger.error(e)
    # ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•á‡§Ç ‡§§‡•ã ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    # exit()

# ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§∏‡•ç‡§ü‡•á‡§™‡•ç‡§∏ (States)
BRAND, MODEL, RAM, FINAL_RESULT = range(4)

# ‡§∏‡§≠‡•Ä ‡§´‡•ã‡§® ‡§Æ‡•â‡§°‡§≤‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ (‡§Ü‡§™ ‡§á‡§∏‡•á ‡§î‡§∞ ‡§¨‡§¢‡§º‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)
phone_models = {
    "Samsung": ["Galaxy S23", "Galaxy A54", "Galaxy M34", "Galaxy F23"],
    "Xiaomi": ["Redmi Note 12 Pro", "Poco F5", "Poco X3 Pro", "Redmi 10"],
    "Realme": ["Realme 11 Pro", "Realme GT Master", "Realme Narzo 50"],
    "Apple": ["iPhone 14 Pro", "iPhone 13", "iPhone 11", "iPhone XR"],
    "Other": ["Low-End Device", "Mid-Range Device", "High-End Device"]
}

# --- ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§\n\n"
        "‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•á‡§∏‡•ç‡§ü ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /sensitivity ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
    )

async def sensitivity_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton(brand, callback_data=brand)] for brand in phone_models.keys()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("Step 1: ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return BRAND

# --- ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def brand_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    brand = query.data
    context.user_data['brand'] = brand # ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§∏‡•á‡§µ ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ
    
    models = phone_models[brand]
    keyboard = [[InlineKeyboardButton(model, callback_data=model)] for model in models]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=f"Step 2: ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ {brand} ‡§Æ‡•â‡§°‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return MODEL

# --- ‡§Æ‡•â‡§°‡§≤ ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def model_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    model = query.data
    context.user_data['model'] = model # ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§Æ‡•â‡§°‡§≤ ‡§∏‡•á‡§µ ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ

    ram_options = ["2-3 GB", "4 GB", "6 GB", "8 GB", "12 GB+"]
    keyboard = [[InlineKeyboardButton(ram, callback_data=ram)] for ram in ram_options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text="Step 3: ‡§Ö‡§™‡§®‡•Ä ‡§∞‡•à‡§Æ (RAM) ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return RAM

# --- ‡§∞‡•à‡§Æ ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def ram_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    ram = query.data
    brand = context.user_data.get('brand', 'N/A')
    model = context.user_data.get('model', 'N/A')
    
    # ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    general = random.randint(95, 100)
    red_dot = random.randint(92, 100)
    scope_2x = random.randint(88, 98)
    
    # ‡§∞‡•à‡§Æ ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á DPI ‡§¨‡§¶‡§≤‡•á‡§Ç
    if "2-3 GB" in ram:
        dpi = random.randint(360, 410)
    elif "4 GB" in ram:
        dpi = random.randint(400, 450)
    else:
        dpi = random.randint(450, 520)

    result_text = (
        f"‚úÖ ‡§Ü‡§™‡§ï‡•á {brand} {model} ({ram}) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä:\n\n"
        f"üéØ General: {general}\n"
        f"üéØ Red Dot: {red_dot}\n"
        f"üéØ 2x Scope: {scope_2x}\n"
        f"üéØ 4x Scope: {random.randint(85, 95)}\n"
        f"üéØ Sniper Scope: {random.randint(75, 88)}\n"
        f"üéØ Free Look: {random.randint(70, 90)}\n\n"
        f"‚ú® (Bonus) DPI: {dpi}\n\n"
        "‡§®‡§à ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ /sensitivity ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§"
    )

    await query.edit_message_text(text=result_text)
    return ConversationHandler.END # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ñ‡§§‡•ç‡§Æ

# --- ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§®‡§à ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è /start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§")
    return ConversationHandler.END

# === Vercel ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§ü‡§Ö‡§™ ===

# ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§ï‡•ã ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
application = Application.builder().token(BOT_TOKEN).build()

# ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("sensitivity", sensitivity_start)],
    states={
        BRAND: [CallbackQueryHandler(brand_choice)],
        MODEL: [CallbackQueryHandler(model_choice)],
        RAM: [CallbackQueryHandler(ram_choice)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

# ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)


# --- Vercel ‡§ï‡•á ‡§≤‡§ø‡§è async main ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
# ‡§Ø‡§π Vercel ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ
async def handler(request):
    """Vercel ‡§ï‡•á webhook ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡§æ ‡§π‡•à‡•§"""
    await application.initialize()
    update = Update.de_json(await request.get_json(), application.bot)
    await application.process_update(update)
    return {"status": "ok"}


# --- ‡§≤‡•ã‡§ï‡§≤ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è (‡§Ø‡§π Vercel ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ) ---
if __name__ == "__main__":
    print("‡§¨‡•â‡§ü ‡§≤‡•ã‡§ï‡§≤ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à (Polling)...")
    application.run_polling()
