# === ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§î‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§Æ‡•õ‡§¨‡•Ç‡§§ ‡§ï‡•ã‡§° (Vercel ‡§ï‡•á ‡§≤‡§ø‡§è) ===

import os
import random
import logging
import asyncio
import json
from http.server import BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
)

# Logging ‡§ï‡•ã ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã Secrets ‡§∏‡•á ‡§≤‡•á‡§®‡§æ
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# --- ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§∏‡•ç‡§ü‡•á‡§™‡•ç‡§∏ ‡§î‡§∞ ‡§´‡•ã‡§® ‡§°‡•á‡§ü‡§æ (‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç) ---
BRAND, MODEL, RAM = range(3)
phone_models = {
    "Samsung": ["Galaxy S23", "Galaxy A54", "Galaxy M34", "Galaxy F23"],
    "Xiaomi": ["Redmi Note 12 Pro", "Poco F5", "Poco X3 Pro", "Redmi 10"],
    "Realme": ["Realme 11 Pro", "Realme GT Master", "Realme Narzo 50"],
    "Apple": ["iPhone 14 Pro", "iPhone 13", "iPhone 11", "iPhone XR"],
    "Other": ["Low-End Device", "Mid-Range Device", "High-End Device"]
}

# --- ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ (‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§\n\n"
        "‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•á‡§∏‡•ç‡§ü ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /sensitivity ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
    )

async def sensitivity_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[InlineKeyboardButton(brand, callback_data=brand)] for brand in phone_models.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Step 1: ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return BRAND

async def brand_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    brand = query.data
    context.user_data['brand'] = brand
    models = phone_models[brand]
    keyboard = [[InlineKeyboardButton(model, callback_data=model)] for model in models]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"Step 2: ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ {brand} ‡§Æ‡•â‡§°‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return MODEL

async def model_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    model = query.data
    context.user_data['model'] = model
    ram_options = ["2-3 GB", "4 GB", "6 GB", "8 GB", "12 GB+"]
    keyboard = [[InlineKeyboardButton(ram, callback_data=ram)] for ram in ram_options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="Step 3: ‡§Ö‡§™‡§®‡•Ä ‡§∞‡•à‡§Æ (RAM) ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    return RAM

async def ram_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    ram = query.data
    brand = context.user_data.get('brand', 'N/A')
    model = context.user_data.get('model', 'N/A')
    general = random.randint(95, 100)
    red_dot = random.randint(92, 100)
    scope_2x = random.randint(88, 98)
    if "2-3 GB" in ram: dpi = random.randint(360, 410)
    elif "4 GB" in ram: dpi = random.randint(400, 450)
    else: dpi = random.randint(450, 520)
    result_text = (
        f"‚úÖ ‡§Ü‡§™‡§ï‡•á {brand} {model} ({ram}) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä:\n\n"
        f"üéØ General: {general}\nüéØ Red Dot: {red_dot}\nüéØ 2x Scope: {scope_2x}\n"
        f"üéØ 4x Scope: {random.randint(85, 95)}\nüéØ Sniper Scope: {random.randint(75, 88)}\n"
        f"üéØ Free Look: {random.randint(70, 90)}\n\n‚ú® (Bonus) DPI: {dpi}\n\n"
        "‡§®‡§à ‡§∏‡•á‡§Ç‡§∏‡§ø‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ /sensitivity ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§"
    )
    await query.edit_message_text(text=result_text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    return ConversationHandler.END


# === Vercel ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§ü‡§Ö‡§™ ===

# ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§ï‡•ã ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç
if BOT_TOKEN:
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("sensitivity", sensitivity_start)],
        states={
            BRAND: [CallbackQueryHandler(brand_choice)],
            MODEL: [CallbackQueryHandler(model_choice)],
            RAM: [CallbackQueryHandler(ram_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
else:
    logger.error("BOT_TOKEN is not set. The application cannot be initialized.")
    application = None


# Vercel ‡§á‡§∏‡•Ä 'handler' ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§ï‡•ã ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§ó‡§æ
class handler(BaseHTTPRequestHandler):
    
    def do_GET(self):
        # GET ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§ú‡§µ‡§æ‡§¨, ‡§§‡§æ‡§ï‡§ø 501 ‡§è‡§∞‡§∞ ‡§® ‡§Ü‡§è
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Hello! This is a Telegram bot. Please interact with it on Telegram.")

    def do_POST(self):
        if application is None:
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Bot is not configured. Check BOT_TOKEN.")
            return

        try:
            # ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡•â‡§°‡•Ä ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§™‡§¢‡§º‡•á‡§Ç
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            update_data = json.loads(body.decode('utf-8'))
            
            # ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç
            # asyncio.run() ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡•Ç‡§™ ‡§ï‡•ã ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
            asyncio.run(self.process_telegram_update(update_data))

            # ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§≠‡•á‡§ú‡•á‡§Ç
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
        except Exception as e:
            logger.error(f"Error processing POST request: {e}", exc_info=True)
            self.send_response(500)
            self.end_headers()

    async def process_telegram_update(self, update_data):
        # ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡•õ ‡§π‡•ã ‡§ö‡•Å‡§ï‡•Ä ‡§π‡•à
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        await application.process_update(update)
        
